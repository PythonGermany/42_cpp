/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rburgsta <rburgsta@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/06/18 15:30:15 by rburgsta          #+#    #+#             */
/*   Updated: 2023/06/18 19:23:04 by rburgsta         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ScalarConverter.hpp"

typedef ScalarConverter s;

void processString(std::string& literal) {
  std::cout << "Input: \"" << literal << "\"" << std::endl;
  s::printType(s::verifyValue(literal));
  s::convert(literal);
  std::cout << std::endl;
}

int main() {
  std::string strs[] = {
      "0",
      "42.0f",
      "0.0f",
      "0.",
      ".0",
      ".0f",
      "0f",
      "0000000f",
      "0.0000000124",
      "-124",
      "33",
      "127",
      "128",
      "-128",
      "-129",
      "127.5",
      "127.5f",
      "-128.5",
      "-128.5f",
      "2147483647",
      "2147483648",
      "-2147483648",
      "-2147483649",
      "2147483647.5f",
      "-2147483648.5f",
      "340282346638528859811704183484516925440.0f",
      "-340282346638528859811704183484516925440.0f",
      "3402823466385288598117041834845169254400.0f",
      "-3402823466385288598117041834845169254400.0f",
      "340282346638528859811704183484516925440.0",
      "-340282346638528859811704183484516925440.0",
      "3402823466385288598117041834845169254400.0",
      "-3402823466385288598117041834845169254400.0",
      "179769313486231570814527423731704356798070567525844996598917476803157260"
      "780028538760589558632766878171540458953514382464234321326889464182768467"
      "546703537516986049910576551282076245490090389328944075868508455133942304"
      "583236903222948165808559332123348274797826204144723168738177180919299881"
      "250404026184124858368.0",
      "-17976931348623157081452742373170435679807056752584499659891747680315726"
      "078002853876058955863276687817154045895351438246423432132688946418276846"
      "754670353751698604991057655128207624549009038932894407586850845513394230"
      "458323690322294816580855933212334827479782620414472316873817718091929988"
      "1250404026184124858368.0",
      "179769313486231570814527423731704356798070567525844996598917476803157260"
      "780028538760589558632766878171540458953514382464234321326889464182768467"
      "546703537516986049910576551282076245490090389328944075868508455133942304"
      "583236903222948165808559332123348274797826204144723168738177180919299881"
      "2504040261841248583680.0",
      "-17976931348623157081452742373170435679807056752584499659891747680315726"
      "078002853876058955863276687817154045895351438246423432132688946418276846"
      "754670353751698604991057655128207624549009038932894407586850845513394230"
      "458323690322294816580855933212334827479782620414472316873817718091929988"
      "12504040261841248583680.0",
      "nan",
      "nanf",
      "+inf",
      "-inf",
      "+inff",
      "-inff"};
  for (int i = 0; i < 43; i++) processString(strs[i]);
}